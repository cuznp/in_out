require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TeamsController, :type => :controller do
  
  let(:user) { create(:user) }

  before do
    sign_in user
  end

  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TeamsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

describe "GET #index" do 
  it "populates an array of contacts" do 
    team = FactoryGirl.create(:team) 
    get :index 
    expect(assigns(:teams)).to eq([team]) 
  end 
  it "renders the :index view" do 
    get :index 
    expect(response).to render_template :index 
  end 
end
  describe "GET show" do
    it "assigns the requested team as @team" do
      team = FactoryGirl.create(:team)
      @members = FactoryGirl.create_list(:user, 2)
      @nonmembers = FactoryGirl.create_list(:user, 2)
      get :show, id: team
      expect(assigns(:team)).to eq(team)
    end

    it "renders the #show view" do 
      team = FactoryGirl.create(:team)
      get :show, id: team
      expect(response).to render_template :show
    end
  end
  describe "GET edit" do

    it "assigns the requested user as @team" do
      team = FactoryGirl.create(:team)
      get :edit, id: team
      expect(assigns(:team)).to eq(team)
    end

    it "renders the #edit view" do
      team = FactoryGirl.create(:team)
      get :edit, id: team
      expect(response).to render_template :edit
    end 
  end

  describe "GET new" do

    it "renders the #new view" do
      team = FactoryGirl.create(:team)
      get :new
      expect(response).to render_template :new
    end 
  end


  describe "POST create" do
    describe "with valid params" do
      it "creates a new Team" do
        expect {
          post :create, {:team => FactoryGirl.attributes_for(:team)}
        }.to change(Team, :count).by(1)
      end

      it "assigns a newly created team as @team" do
        post :create, {:team => FactoryGirl.attributes_for(:team)}
        expect(assigns(:team)).to be_a(Team)
        expect(assigns(:team)).to be_persisted
      end

      it "redirects to the created team" do
        post :create, {:team => FactoryGirl.attributes_for(:team)}
        expect(response).to redirect_to(Team.last)
      end
    end

    describe "with invalid params" do
      it "does not create a team" do
        post :create, {:team => FactoryGirl.attributes_for(:invalid_team)}
        expect(assigns(:team)).to_not be_a_new(Team)
      end

      it"redirects to new" do
        post :create, {:team => FactoryGirl.attributes_for(:invalid_team)}
        expect(response).to redirect_to(Team.last)
      end
    end
  end

  describe "PUT update" do
    before :each do
      @team = FactoryGirl.create(:team, name: "Test_Team_A")

    end

    
    describe "with valid params" do
 
      let(:new_attributes) { FactoryGirl.attributes_for(:team) }

      it "updates the requested team" do
        put :update, {:id => @team.id, :team => new_attributes}
        @team.reload
      end

      it "assigns the requested team as @team" do
        put :update, {:id => @team.id, :team => new_attributes}
        expect(assigns(:team)).to eq(@team)
      end

      it "redirects to the team" do
        put :update, {:id => @team.id, :team => new_attributes}
        expect(response).to redirect_to(@team)
      end
    end

    describe "with invalid params" do
      it "assigns the team as @team" do
        put :update, {:id => @team.id, :team => FactoryGirl.attributes_for(:invalid_team)}
        expect(assigns(:team)).to eq(@team)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested team" do
      team = FactoryGirl.create(:team)
      expect {
        delete :destroy, {:id => team.id}
      }.to change(Team, :count).by(-1)
    end

    it "redirects to the teams list" do
      team = FactoryGirl.create(:team)
      delete :destroy, {:id => team.id}
      expect(response).to redirect_to(teams_path)
    end

    it "sets all member associations to NULL" do
      team = FactoryGirl.create(:team)
      thisuser = FactoryGirl.create(:user)
      thisuser.team_id = team.id
      thisuser.save
      delete :destroy, {:id => team.id}
      thisuser.reload
      expect(thisuser.team_id).to eq(nil)
    end
  end

end
